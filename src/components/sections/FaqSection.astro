---
// Definimos el tipo de dato que espera este componente
type FaqItem = {
  question: string;
  answer: string; // Asumimos que el 'answer' es HTML pre-formateado
}

interface Props {
  faqs: FaqItem[];
}

const { faqs } = Astro.props;
---

<section id="faq" class="section bg-light">
    <div class="container container-narrow">
        <div class="text-center">
            <h2 class="section-title">Preguntas Frecuentes</h2>
            <h3>Respuestas a tus dudas más comunes.</h3>
        </div>
        <div id="faq-accordion" class="faq-container">
            {faqs.map(item => (
                <div class="faq-item">
                    <button class="faq-question" aria-expanded="false">
                        <span>{item.question}</span>
                        <i class="ph ph-plus faq-icon"></i>
                    </button>
                    <div class="faq-answer hidden">
                        {/* Usamos set:html porque asumimos que 'answer' puede contener HTML */}
                        <p set:html={item.answer} />
                    </div>
                </div>
            ))}
        </div>
    </div>
</section>

<style>
.faq-container { 
    display: flex; 
    flex-direction: column; 
    gap: 1rem; 
    margin-top: 2.5rem; /* Añadido margen superior */
}

.faq-item {
    background-color: var(--color-white);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 1rem;
}

.faq-question {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: none;
    border: none;
    cursor: pointer;
    font-family: var(--font-sans);
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--color-dark);
    padding: 0;
    text-align: left;
}

.faq-icon { 
    font-size: 1.25rem; 
    color: var(--color-secondary); 
    transition: transform 0.3s; 
    margin-left: 1rem; /* Espacio entre texto e icono */
    flex-shrink: 0; /* Evita que el icono se encoja */
}

.faq-question span {
    flex-grow: 1; /* Permite que el texto ocupe el espacio */
}

.faq-question[aria-expanded="true"] .faq-icon { 
    transform: rotate(45deg); 
}

.faq-answer { 
    padding-top: 1rem; 
    overflow: hidden; /* Necesario para la transición */
    transition: max-height 0.3s ease-out, padding-top 0.3s ease-out;
    max-height: 0; /* Oculto por defecto */
}

.faq-answer:not(.hidden) {
    max-height: 500px; /* Un valor grande para permitir expansión */
    padding-top: 1rem;
}

.faq-answer p {
    margin-bottom: 0; /* Quitamos margen inferior del párrafo dentro */
}

/* Clases globales referenciadas (Astro las encapsula) */
@layer global {
    .section { /* ... */ }
    .bg-light { /* ... */ }
    .container { /* ... */ }
    .container-narrow { /* ... */ }
    .text-center { /* ... */ }
    .section-title { /* ... */ }
    h3 { /* ... */ }
    .hidden { display: none !important; } /* Mantenemos !important aquí */
}
</style>

<script>
// El script se mantiene igual, pero ahora está encapsulado
document.querySelectorAll('.faq-question').forEach(button => {
    button.addEventListener('click', () => {
        const answer = button.nextElementSibling as HTMLElement | null; // Tipado para TS
        const icon = button.querySelector('.faq-icon');
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        button.setAttribute('aria-expanded', String(!isExpanded));
        
        if (answer) {
            // Usamos la clase para manejar la visibilidad y transición
            answer.classList.toggle('hidden'); 
        }
        
        if (icon) {
            icon.classList.toggle('ph-plus');
            icon.classList.toggle('ph-minus');
        }
    });
});
</script>